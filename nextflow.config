// Load process parameters
includeConfig 'conf/base.config'
// Load ressources configuration
includeConfig 'conf/resources.config'

env {
	WDir = "$baseDir"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/usr/bin/env bash', '-euo', 'pipefail']

// Execution profiles
profiles {

	custom {
		includeConfig "$baseDir/conf/custom.config"
		includeConfig "$baseDir/conf/reports.config"
		// Workdir for temporary data
		workDir = "$env.WDir/lagoon_mcl/$params.projectName"
	}

	test {
		includeConfig "$baseDir/conf/test.config"
		includeConfig "$baseDir/conf/reports.config"
		// Workdir for temporary data
		workDir = "$env.WDir/WorkDir/$params.projectName"
	}

	singularity {
		singularity.autoMounts = true
		singularity.enabled = true

		process {

			// seqkit
			withLabel: seqkit {
				container = "$baseDir/containers/singularity/seqkit_2.6.1.sif"
			}

			// darkdino
			withLabel: darkdino {
				container = "$baseDir/containers/singularity/darkdino-project_1.0.sif"
			}

			// diamond
			withLabel: diamond {
				container = "$baseDir/containers/singularity/diamond_2.1.8.sif"
			}
			
			// MCL
			withLabel: mcl {
				container = "$baseDir/containers/singularity/mcl_22-282.sif"
			}
		}
	}

	conda {
		conda.enabled = true
        channels = ['conda-forge', 'bioconda', 'defaults']

		process {

			// seqkit
			withLabel: seqkit {
				conda = "$baseDir/containers/conda/seqkit_2_6_1"
			}

			// darkdino
			withLabel: darkdino {
				conda = "$baseDir/containers/conda/darkdino_1_0"
			}

			// diamond
			withLabel: diamond {
				conda = "$baseDir/containers/conda/diamond_2_1_8"
			}
			
			// MCL
			withLabel: mcl {
				conda = "$baseDir/containers/conda/mcl_22_282"
			}
		}
	}
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

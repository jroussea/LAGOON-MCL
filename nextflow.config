// Load ressources and process parameters
includeConfig 'conf/base.config'

/*
* -------------------------------------------------
*  Nextflow config file for processes options
* -------------------------------------------------
* Defines general paths for input files and
* parameters for your own LAGOON-MCL analysis
*/

params {
    
    /*
    General parameters
    */
    help = false

    /*
    Ressources
    */
    max_cpus = 15
    max_memory = '60.GB'
    max_time = '336.h'

    // Analyzed project name

    projectName = "lagoon-mcl_workdir"

    // input fasta
    fasta =  null
    annotation = null
    pep_colname = null

    columns_attributes = null

    // other
    concat_fasta = "all_sequences"

    information = false
    information_files = null
    information_attributes = null

    // Output directory
    outdir = "$baseDir/results"

    run_diamond = true

    // diamond database
    diamond_db = "reference"
    
    // diamond blastp option    
    alignment_file = null
    
    query = 1
    subject = 2
    evalue = 12

    diamond = "diamond_alignment.tsv"
    sensitivity = "sensitive"
    matrix = "BLOSUM62"
    diamond_evalue = 0.001

    // diamond result

    // network
    // MCL
    I = "1.4,2,4"
    max_weight = 350 
}

// Capture exit codes from upstream processes when piping
//process.shell = ['/usr/bin/env bash', '-euo', 'pipefail']

// Execution profiles
profiles {

	test_full { includeConfig "$baseDir/conf/test_full.config" }

	docker {
		docker.enabled = true
		process {
			container = 'jroussea/lagoon-mcl:latest'
		}
		workDir = "$baseDir/workdir/$params.projectName"
	}
	singularity {
		singularity.autoMounts = true
		singularity.enabled = true
		process {
			container = "$baseDir/containers/singularity/lagoon-mcl.sif"
		}
		workDir = "$baseDir/workdir/$params.projectName"
	}
	conda {
		conda.enabled = true
		process {
			conda = "$baseDir/containers/conda/lagoon-mcl.yaml"
		}
		workDir = "$baseDir/workdir/$params.projectName"
	}
	mamba {
		conda.enabled = true
        conda.useMamba = true
		process {
			conda = "$baseDir/containers/conda/lagoon-mcl.yaml"
		}
		workDir = "$baseDir/workdir/$params.projectName"
	}
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file = "${params.outdir}/reports/report_${trace_timestamp}.html"
}
// create a diagram of tasks
dag {
    enabled = true
    file = "${params.outdir}/reports/dag_${trace_timestamp}.html"
}
// produce a timeline report in html : timeline.html
timeline {
    enabled = true
    file = "${params.outdir}/reports/timeline_${trace_timestamp}.html"
}
// enable trace to get a detailed report on each task trace.txt
trace {
    enabled = true
    //fields = 'task_id,hash,native_id,process,status,exit,queue,cpus,%cpu,memory,%mem,time,realtime,workdir'
    file = "${params.outdir}/reports/trace_${trace_timestamp}.tsv"
    sep = '\t'
}

manifest {
    name            = 'jroussea/lagoon-mcl'
    author          = """Jeremy Rousseau"""
    homePage        = 'https://github.com/jroussea/lagoon-mcl'
    description     = """LArge cOmparatie Omics Network"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.10.0'
    version         = '1.0.2'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// Load process parameters
includeConfig 'conf/base.config'
// Load ressources configuration

env {
	WDir = "$baseDir"
}

// Capture exit codes from upstream processes when piping
//process.shell = ['/usr/bin/env bash', '-euo', 'pipefail']

// Execution profiles
profiles {

	custom {
		includeConfig "$baseDir/conf/custom.config"
		includeConfig "$baseDir/conf/reports.config"
		workDir = "$env.WDir/workdir/$params.projectName"
	}

	test_full {
		includeConfig "$baseDir/conf/test_full.config"
		includeConfig "$baseDir/conf/reports.config"
		workDir = "$baseDir/workdir/$params.projectName"
	}
	test_small {
		includeConfig "$baseDir/conf/test_small.config"
		includeConfig "$baseDir/conf/reports.config"
		workDir = "$baseDir/workdir/$params.projectName"
	}
	test_alignment {
		includeConfig "$baseDir/conf/test_alignment.config"
		includeConfig "$baseDir/conf/reports.config"
		workDir = "$baseDir/workdir/$params.projectName"
	}

	singularity {
		singularity.autoMounts = true
		singularity.enabled = true
		process {
			withLabel: darkdino {
				container = "$baseDir/containers/singularity/lagoon_mcl_1-0-0.sif"
			}
			withLabel: diamond {
				container = "$baseDir/containers/singularity/diamond_2.1.8.sif"
			}
			withLabel: mcl {
				container = "$baseDir/containers/singularity/mcl_22-282.sif"
			}
		}
	}

	conda {
		conda.enabled = true
		process {
			withLabel: darkdino {
				conda = "$baseDir/containers/conda/lagoon-mcl_1-0-0.yaml"
			}
			withLabel: diamond {
				conda = "$baseDir/containers/conda/diamond_2-1-8.yaml"
			}
			withLabel: mcl {
				conda = "$baseDir/containers/conda/mcl_22-282.yaml"
			}
		}
	}
	mamba {
		conda.enabled = true
        conda.useMamba = true
		process {
			withLabel: darkdino {
				conda = "$baseDir/containers/conda/lagoon-mcl_1-0-0.yaml"
			}
			withLabel: diamond {
				conda = "$baseDir/containers/conda/diamond_2-1-8.yaml"
			}
			withLabel: mcl {
				conda = "$baseDir/containers/conda/mcl_22-282.yaml"
			}
		}
	}
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
